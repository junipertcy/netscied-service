package services

import models.Network._

class NetworkService {
  val nodeList: List[Node] = List(
    Node(group=1, name=0), Node(group=1, name=1), Node(group=1, name=2), Node(group=1, name=3), Node(group=1, name=4), Node(group=1, name=5), Node(group=1, name=6), Node(group=1, name=7), Node(group=1, name=8), Node(group=2, name=9), Node(group=1, name=10), Node(group=1, name=11), Node(group=1, name=12), Node(group=1, name=13), Node(group=2, name=14), Node(group=2, name=15), Node(group=1, name=16), Node(group=1, name=17), Node(group=2, name=18), Node(group=1, name=19), Node(group=2, name=20), Node(group=1, name=21), Node(group=2, name=22), Node(group=2, name=23), Node(group=2, name=24), Node(group=2, name=25), Node(group=2, name=26), Node(group=2, name=27), Node(group=2, name=28), Node(group=2, name=29), Node(group=2, name=30), Node(group=2, name=31), Node(group=2, name=32), Node(group=2, name=33)
  )
  val edgeList: List[Edge] = List(
    Edge(source=0, target=1, value=1), Edge(source=0, target=2, value=1), Edge(source=0, target=3, value=1), Edge(source=0, target=4, value=1), Edge(source=0, target=5, value=1), Edge(source=0, target=6, value=1), Edge(source=0, target=7, value=1), Edge(source=0, target=8, value=1), Edge(source=0, target=10, value=1), Edge(source=0, target=11, value=1), Edge(source=0, target=12, value=1), Edge(source=0, target=13, value=1), Edge(source=0, target=17, value=1), Edge(source=0, target=19, value=1), Edge(source=0, target=21, value=1), Edge(source=0, target=31, value=1), Edge(source=1, target=2, value=1), Edge(source=1, target=3, value=1), Edge(source=1, target=7, value=1), Edge(source=1, target=13, value=1), Edge(source=1, target=17, value=1), Edge(source=1, target=19, value=1), Edge(source=1, target=21, value=1), Edge(source=1, target=30, value=1), Edge(source=2, target=3, value=1), Edge(source=2, target=32, value=1), Edge(source=2, target=7, value=1), Edge(source=2, target=8, value=1), Edge(source=2, target=9, value=1), Edge(source=2, target=13, value=1), Edge(source=2, target=27, value=1), Edge(source=2, target=28, value=1), Edge(source=3, target=7, value=1), Edge(source=3, target=12, value=1), Edge(source=3, target=13, value=1), Edge(source=4, target=10, value=1), Edge(source=4, target=6, value=1), Edge(source=5, target=16, value=1), Edge(source=5, target=10, value=1), Edge(source=5, target=6, value=1), Edge(source=6, target=16, value=1), Edge(source=8, target=32, value=1), Edge(source=8, target=30, value=1), Edge(source=8, target=33, value=1), Edge(source=9, target=33, value=1), Edge(source=13, target=33, value=1), Edge(source=14, target=32, value=1), Edge(source=14, target=33, value=1), Edge(source=15, target=32, value=1), Edge(source=15, target=33, value=1), Edge(source=18, target=32, value=1), Edge(source=18, target=33, value=1), Edge(source=19, target=33, value=1), Edge(source=20, target=32, value=1), Edge(source=20, target=33, value=1), Edge(source=22, target=32, value=1), Edge(source=22, target=33, value=1), Edge(source=23, target=32, value=1), Edge(source=23, target=25, value=1), Edge(source=23, target=27, value=1), Edge(source=23, target=29, value=1), Edge(source=23, target=33, value=1), Edge(source=24, target=25, value=1), Edge(source=24, target=27, value=1), Edge(source=24, target=31, value=1), Edge(source=25, target=31, value=1), Edge(source=26, target=33, value=1), Edge(source=26, target=29, value=1), Edge(source=27, target=33, value=1), Edge(source=28, target=33, value=1), Edge(source=28, target=31, value=1), Edge(source=29, target=32, value=1), Edge(source=29, target=33, value=1), Edge(source=30, target=33, value=1), Edge(source=30, target=32, value=1), Edge(source=31, target=33, value=1), Edge(source=31, target=32, value=1), Edge(source=32, target=33, value=1)
  )
  val exampleNode = Network(
    network_id = "example_karate_network",
    nodes = nodeList,
    edges = edgeList
  )

  def getKarateNetwork(): Option[Network] = Option(exampleNode)
}